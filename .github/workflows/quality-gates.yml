name: Quality Gates & Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check src/**/*.ts

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Check for TODO comments
        run: |
          if grep -r "TODO\|FIXME\|HACK" src/ --include="*.ts" | grep -v "test"; then
            echo "Found TODO/FIXME/HACK comments. Please address them before merging."
            exit 1
          fi

      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" src/ --include="*.ts" | grep -v "test"; then
            echo "Found console.log statements. Please remove them before merging."
            exit 1
          fi

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lawfirmpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lawfirmpro_test

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lawfirmpro_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret

      - name: Check coverage thresholds
        run: |
          if [ $(npx nyc report --reporter=text-summary | grep "All files" | awk '{print $4}' | sed 's/%//') -lt 80 ]; then
            echo "Test coverage is below 80%. Please add more tests."
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Generate dependency graph
        run: npm ls --json > dependency-graph.json

      - name: Upload dependency graph
        uses: actions/upload-artifact@v4
        with:
          name: dependency-graph
          path: dependency-graph.json

  pr-automation:
    name: PR Automation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add labels based on files changed
        uses: actions/labeler@v4
        with:
          configuration-path: .github/labeler.yml

      - name: Add reviewers
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          reviewers: ${{ github.actor }}
          team-reviewers: developers

      - name: Check for draft PR
        if: github.event.pull_request.draft == true
        run: |
          echo "This is a draft PR. Some checks are skipped."

      - name: Request changes if needed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Some quality checks failed. Please review the logs and fix the issues before merging.'
            })

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test-coverage, dependency-analysis]
    if: always()

    steps:
      - name: Check all jobs passed
        if: needs.code-quality.result != 'success' || needs.test-coverage.result != 'success' || needs.dependency-analysis.result != 'success'
        run: |
          echo "❌ Quality gate failed"
          exit 1

      - name: Approve PR if all checks pass
        if: needs.code-quality.result == 'success' && needs.test-coverage.result == 'success' && needs.dependency-analysis.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE'
            })

      - name: Add quality gate status
        uses: actions/github-script@v7
        with:
          script: |
            const status = needs.code-quality.result == 'success' && needs.test-coverage.result == 'success' && needs.dependency-analysis.result == 'success' ? '✅' : '❌';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${status} Quality Gate: Code quality checks ${needs.code-quality.result}, test coverage ${needs.test-coverage.result}, dependency analysis ${needs.dependency-analysis.result}`
            })