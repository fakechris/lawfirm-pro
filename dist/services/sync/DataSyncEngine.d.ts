import { DataSyncEngine, DataSource, DataTarget, SyncResult, Conflict, ResolutionResult, ResolutionStrategy, DataTransformer, ValidationRule, SyncMetrics, HealthStatus } from '../../models/integration';
export declare class DataSyncEngineImplementation implements DataSyncEngine {
    private database;
    private logger;
    private cache;
    private metrics;
    private isActive;
    constructor();
    syncData(source: DataSource, target: DataTarget): Promise<SyncResult>;
    resolveConflicts(conflicts: Conflict[], strategy: ResolutionStrategy): Promise<ResolutionResult[]>;
    transformData(data: any, transformer: DataTransformer): Promise<any>;
    cacheData(key: string, data: any, ttl?: number): Promise<void>;
    getCachedData(key: string): Promise<any>;
    validateData(data: any, rules: ValidationRule[]): Promise<boolean>;
    getSyncMetrics(): Promise<SyncMetrics>;
    healthCheck(): Promise<HealthStatus>;
    private retrieveSourceData;
    private retrieveTargetData;
    private retrieveFromDatabase;
    private retrieveFromAPI;
    private retrieveFromFile;
    private retrieveFromExternalService;
    private detectConflicts;
    private compareRecords;
    private getConflictSeverity;
    private resolveSingleConflict;
    private mergeValues;
    private applyTransformationRule;
    private mapField;
    private transformField;
    private calculateField;
    private validateField;
    private formatField;
    private processSyncData;
    private processBatch;
    private saveToDatabase;
    private saveToAPI;
    private saveToFile;
    private saveToExternalService;
    private createHeaders;
    private cleanupCache;
    private updateMetrics;
    private initializeMetrics;
    private performDatabaseHealthCheck;
    private performCacheHealthCheck;
    private performEngineHealthCheck;
    private generateId;
}
//# sourceMappingURL=DataSyncEngine.d.ts.map