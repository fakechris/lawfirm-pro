"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const RolePermissionController_1 = require("../controllers/RolePermissionController");
const auth_1 = require("../middleware/auth");
const router = (0, express_1.Router)();
router.use(auth_1.AuthMiddleware.authenticate);
router.get('/roles', auth_1.AuthMiddleware.requirePermission('roles:read'), RolePermissionController_1.RoleController.getAllRoles);
router.get('/roles/hierarchy', auth_1.AuthMiddleware.requirePermission('roles:read'), RolePermissionController_1.RoleController.getRoleHierarchy);
router.get('/roles/stats', auth_1.AuthMiddleware.requirePermission('roles:read'), RolePermissionController_1.RoleController.getRoleStats);
router.get('/roles/:id', auth_1.AuthMiddleware.requirePermission('roles:read'), RolePermissionController_1.RoleController.getRoleById);
router.get('/roles/name/:name', auth_1.AuthMiddleware.requirePermission('roles:read'), RolePermissionController_1.RoleController.getRoleByName);
router.post('/roles', auth_1.AuthMiddleware.requirePermission('roles:create'), RolePermissionController_1.RoleController.createRole);
router.put('/roles/:id', auth_1.AuthMiddleware.requirePermission('roles:update'), RolePermissionController_1.RoleController.updateRole);
router.delete('/roles/:id', auth_1.AuthMiddleware.requirePermission('roles:delete'), RolePermissionController_1.RoleController.deleteRole);
router.get('/roles/:id/permissions', auth_1.AuthMiddleware.requirePermission('roles:read'), RolePermissionController_1.RoleController.getRolePermissions);
router.post('/roles/:id/permissions', auth_1.AuthMiddleware.requirePermission('roles:update'), RolePermissionController_1.RoleController.addPermissionToRole);
router.delete('/roles/:id/permissions', auth_1.AuthMiddleware.requirePermission('roles:update'), RolePermissionController_1.RoleController.removePermissionFromRole);
router.put('/roles/:id/permissions', auth_1.AuthMiddleware.requirePermission('roles:update'), RolePermissionController_1.RoleController.setRolePermissions);
router.post('/roles/initialize', auth_1.AuthMiddleware.requirePermission('system:configure'), RolePermissionController_1.RoleController.initializeSystemRoles);
router.get('/permissions', auth_1.AuthMiddleware.requirePermission('permissions:read'), RolePermissionController_1.PermissionController.getAllPermissions);
router.get('/permissions/stats', auth_1.AuthMiddleware.requirePermission('permissions:read'), RolePermissionController_1.PermissionController.getPermissionStats);
router.get('/permissions/resources', auth_1.AuthMiddleware.requirePermission('permissions:read'), RolePermissionController_1.PermissionController.getAllResources);
router.get('/permissions/actions', auth_1.AuthMiddleware.requirePermission('permissions:read'), RolePermissionController_1.PermissionController.getAllActions);
router.get('/permissions/:id', auth_1.AuthMiddleware.requirePermission('permissions:read'), RolePermissionController_1.PermissionController.getPermissionById);
router.get('/permissions/name/:name', auth_1.AuthMiddleware.requirePermission('permissions:read'), RolePermissionController_1.PermissionController.getPermissionByName);
router.get('/permissions/resource/:resource', auth_1.AuthMiddleware.requirePermission('permissions:read'), RolePermissionController_1.PermissionController.getPermissionsByResource);
router.post('/permissions', auth_1.AuthMiddleware.requirePermission('permissions:create'), RolePermissionController_1.PermissionController.createPermission);
router.put('/permissions/:id', auth_1.AuthMiddleware.requirePermission('permissions:update'), RolePermissionController_1.PermissionController.updatePermission);
router.delete('/permissions/:id', auth_1.AuthMiddleware.requirePermission('permissions:delete'), RolePermissionController_1.PermissionController.deletePermission);
router.post('/permissions/initialize', auth_1.AuthMiddleware.requirePermission('system:configure'), RolePermissionController_1.PermissionController.initializeSystemPermissions);
router.get('/permissions/validate', auth_1.AuthMiddleware.requirePermission('system:configure'), RolePermissionController_1.PermissionController.validateRoleStructure);
exports.default = router;
//# sourceMappingURL=roles.js.map