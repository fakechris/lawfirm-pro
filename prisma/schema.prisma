// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD
// 用户角色枚举
enum UserRole {
  ADMIN
  LAWYER
  PARALEGAL
  ASSISTANT
  ARCHIVIST
}

// 用户状态枚举
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// 案件类型枚举
enum CaseType {
  LABOR_DISPUTE           // 劳动争议
  MEDICAL_MALPRACTICE     // 医疗纠纷
  CRIMINAL_DEFENSE        // 刑事辩护
  DIVORCE_FAMILY          // 离婚家事
  INHERITANCE_DISPUTE     // 继承纠纷
  CONTRACT_DISPUTE        // 合同纠纷
  ADMINISTRATIVE_CASE     // 行政诉讼
  DEMOLITION_CASE         // 拆迁类案件
  SPECIAL_MATTER          // 特殊事项管理
}

// 案件阶段枚举
enum CasePhase {
  INTAKE_RISK_ASSESSMENT   // 接案、风险评估与策略制定
  PRE_PROCEEDING_PREP      // 诉前准备与立案
  FORMAL_PROCEEDINGS       // 正式程序（庭审/听证/仲裁）
  RESOLUTION_POST          // 解决方案与后续行动
  CLOSURE_REVIEW           // 结案、审查与归档
}

// 案件状态枚举
enum CaseStatus {
  DRAFT
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

// 任务状态枚举
=======
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientProfile ClientProfile?
  attorneyProfile AttorneyProfile?
  assignedTasks  Task[] @relation("TaskAssignee")
  createdTasks   Task[] @relation("TaskCreator")
  invoices      Invoice[]
  timeEntries   TimeEntry[]
  expenses      Expense[]
  notifications Notification[]
  notificationPreference NotificationPreference?

  @@map("users")
}

model ClientProfile {
  id        String @id @default(cuid())
  userId    String @unique
  phone     String?
  address   String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases  Case[]
  invoices Invoice[]
  trustAccounts TrustAccount[]

  @@map("client_profiles")
}

model AttorneyProfile {
  id          String @id @default(cuid())
  userId      String @unique
  licenseNumber String
  specialization String
  experience  Int?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases  Case[]

  @@map("attorney_profiles")
}

model Case {
  id          String      @id @default(cuid())
  title       String
  description String?
  caseType    CaseType
  status      CaseStatus
  phase       CasePhase
  clientId    String
  attorneyId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  closedAt    DateTime?
  
  // Relations
  client      ClientProfile @relation(fields: [clientId], references: [id])
  attorney    AttorneyProfile @relation(fields: [attorneyId], references: [id])
  documents   Document[]
  tasks       Task[]
  evidenceItems EvidenceItem[]
  invoices    Invoice[]
  billingNodes BillingNode[]
  timeEntries  TimeEntry[]
  expenses     Expense[]
  trustAccounts TrustAccount[]

  @@map("cases")
}

model Document {
  id            String            @id @default(cuid())
  filename      String
  originalName  String
  path          String
  size          Int
  mimeType      String
  caseId        String?
  uploadedBy    String
  uploadedAt    DateTime          @default(now())
  isConfidential Boolean          @default(false)
  isTemplate    Boolean          @default(false)
  category      DocumentCategory?
  status        DocumentStatus    @default(ACTIVE)
  description   String?
  tags          String[]
  metadata      Json?
  checksum      String?
  version       Int               @default(1)
  thumbnailPath String?
  extractedText String?
  
  // Relations
  case          Case?             @relation(fields: [caseId], references: [id], onDelete: Cascade)
  versions      DocumentVersion[]
  template      DocumentTemplate? @relation("DocumentTemplateSource", fields: [templateId], references: [id])
  templateId    String?
  workflow      DocumentWorkflow?
  comments      DocumentComment[]
  shares        DocumentShare[]

  @@map("documents")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  caseId      String
  assignedTo  String
  assignedBy  String
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?
  
  // Relations
  case        Case               @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee    User               @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator     User               @relation("TaskCreator", fields: [assignedBy], references: [id])
  dependencies TaskDependency[]  @relation("TaskDependencies")
  dependents   TaskDependency[]  @relation("TaskDependents")

  @@map("tasks")
}

model TaskDependency {
  id              String   @id @default(cuid())
  taskId          String
  dependsOnTaskId String
  dependencyType  DependencyType @default(BLOCKING)
  createdAt       DateTime @default(now())
  
  // Relations
  task            Task @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask   Task @relation("TaskDependents", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, dependsOnTaskId])
  @@map("task_dependencies")
}

// Enums
enum UserRole {
  CLIENT
  ATTORNEY
  ADMIN
  ASSISTANT
}

enum CaseType {
  LABOR_DISPUTE
  MEDICAL_MALPRACTICE
  CRIMINAL_DEFENSE
  DIVORCE_FAMILY
  INHERITANCE_DISPUTE
  CONTRACT_DISPUTE
  ADMINISTRATIVE_CASE
  DEMOLITION_CASE
  SPECIAL_MATTERS
}

enum CaseStatus {
  INTAKE
  ACTIVE
  PENDING
  COMPLETED
  CLOSED
  ARCHIVED
}

enum CasePhase {
  INTAKE_RISK_ASSESSMENT
  PRE_PROCEEDING_PREPARATION
  FORMAL_PROCEEDINGS
  RESOLUTION_POST_PROCEEDING
  CLOSURE_REVIEW_ARCHIVING
}

enum DocumentCategory {
  LEGAL_BRIEF
  CONTRACT
  EVIDENCE
  CORRESPONDENCE
  COURT_FILING
  RESEARCH
  FINANCIAL
  MEDICAL
  OTHER
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  DELETED
  UNDER_REVIEW
}

>>>>>>> epic/law-firm-pro
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
<<<<<<< HEAD
  OVERDUE
}

// 任务优先级枚举
=======
}

>>>>>>> epic/law-firm-pro
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

<<<<<<< HEAD
// 文档类型枚举
enum DocumentType {
  LEGAL_DOCUMENT
  EVIDENCE
  CONTRACT
  CORRESPONDENCE
  COURT_FILING
  RESEARCH
  TEMPLATE
  OTHER
}

// 文档状态枚举
enum DocumentStatus {
  DRAFT
  REVIEW
  APPROVED
  SIGNED
  FILED
  ARCHIVED
}

// 计费方式枚举
enum BillingMethod {
  FIXED_FEE              // 计件收费
  HOURLY                 // 计时收费
  CONTINGENCY            // 风险代理
  PERCENTAGE             // 按标的额比例收费
}

// 费用状态枚举
enum FeeStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// 支付方式枚举
enum PaymentMethod {
  CASH
  BANK_TRANSFER
  WECHAT_PAY
  ALIPAY
  CREDIT_CARD
}

// 用户表
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  role        UserRole @default(LAWYER)
  status      UserStatus @default(ACTIVE)
  
  // 律师助理子类型
  assistantType String? // RESEARCH_ASSISTANT, DOCUMENT_ASSISTANT, COORDINATION_ASSISTANT
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  leadCases   Case[]                @relation("LeadLawyer")
  assignedTasks Task[]              @relation("TaskAssignee")
  createdTasks Task[]               @relation("TaskCreator")
  uploadedDocuments Document[]      @relation("UserDocuments")
  timeEntries TimeEntry[]           @relation("UserTimeEntries")
  notes       Note[]                @relation("UserNotes")
  caseMemberships CaseTeamMember[]  @relation("UserCaseMemberships")
  documentApprovals DocumentApproval[] @relation("UserDocumentApprovals")
  
  @@map("users")
}

// 客户表
model Client {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  address     String?
  company     String?
  idNumber    String?  // 身份证号或统一社会信用代码
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  cases       Case[]
  documents   Document[]
  contacts    Contact[]
  fees        Fee[]
  
  @@map("clients")
}

// 案件表
model Case {
  id          String     @id @default(cuid())
  caseNumber  String     @unique
  title       String
  description String?
  caseType    CaseType
  phase       CasePhase  @default(INTAKE_RISK_ASSESSMENT)
  status      CaseStatus @default(DRAFT)
  
  // 时间信息
  startDate   DateTime
  expectedEndDate DateTime?
  actualEndDate DateTime?
  
  // 金额信息
  claimAmount Float?     // 诉讼标的额
  settlementAmount Float? // 和解金额
  
  // 关联字段
  clientId    String
  leadLawyerId String
  assignedAt  DateTime  @default(now())
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联关系
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  leadLawyer  User      @relation("LeadLawyer", fields: [leadLawyerId], references: [id], onDelete: Restrict)
  teamMembers CaseTeamMember[]
  tasks       Task[]
  documents   Document[]
  fees        Fee[]
  timeEntries TimeEntry[]
  notes       Note[]
  phases      CasePhaseHistory[]
  
  @@map("cases")
}

// 案件团队成员表
model CaseTeamMember {
  id       String   @id @default(cuid())
  caseId   String
  userId   String
  role     String   // LEAD_LAWYER, PARTICIPATING_LAWYER, RESEARCH_ASSISTANT, DOCUMENT_ASSISTANT, COORDINATION_ASSISTANT, ARCHIVIST
  joinedAt DateTime @default(now())
  leftAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  case     Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user     User     @relation("UserCaseMemberships", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([caseId, userId])
  @@map("case_team_members")
}

// 案件阶段历史表
model CasePhaseHistory {
  id        String   @id @default(cuid())
  caseId    String
  phase     CasePhase
  startDate DateTime
  endDate   DateTime?
  notes     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  @@map("case_phase_history")
}

// 任务表
model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  
  // 时间信息
  dueDate     DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  
  // 关联字段
  caseId      String?
  assigneeId  String?
  createdById String
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // 关联关系
  case        Case?       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy   User        @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Restrict)
  subtasks    SubTask[]
  dependencies TaskDependency[] @relation("TaskDependencies")
  dependents   TaskDependency[] @relation("TaskDependents")
  
  @@map("tasks")
}

// 子任务表
model SubTask {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  
  // 时间信息
  dueDate     DateTime?
  completedAt DateTime?
  
  // 关联字段
  taskId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("subtasks")
}

// 任务依赖表
model TaskDependency {
  id           String   @id @default(cuid())
  taskId       String
  dependsOnId  String
  dependencyType String  // BLOCKS, RELATED_TO
  
  createdAt    DateTime @default(now())
  
  // 关联关系
  task         Task     @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn    Task     @relation("TaskDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, dependsOnId])
  @@map("task_dependencies")
}

// 文档表
model Document {
  id          String        @id @default(cuid())
  filename    String
  originalName String
  path        String
  size        Int
  mimeType    String
  type        DocumentType
  status      DocumentStatus @default(DRAFT)
  
  // 版本控制
  version     Int           @default(1)
  parentId    String?       // 父文档ID（用于版本控制）
  isLatest    Boolean       @default(true)
  
  // 关联字段
  caseId      String?
  clientId    String?
  uploadedById String
  
  // 文档内容
  content     String?
  extractedText String?    // OCR提取的文本
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // 关联关系
  case        Case?         @relation(fields: [caseId], references: [id], onDelete: Cascade)
  client      Client?       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  uploadedBy  User          @relation("UserDocuments", fields: [uploadedById], references: [id], onDelete: Restrict)
  parent      Document?     @relation("DocumentParent", fields: [parentId], references: [id], onDelete: SetNull)
  children    Document[]    @relation("DocumentParent")
  versions    DocumentVersion[]
  approvals   DocumentApproval[]
  
  @@map("documents")
}

// 文档版本表
model DocumentVersion {
  id          String   @id @default(cuid())
  documentId  String
  version     Int
  changes     String?
  createdBy  String
  createdAt   DateTime @default(now())
  
  // 关联关系
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, version])
  @@map("document_versions")
}

// 文档审批表
model DocumentApproval {
  id          String           @id @default(cuid())
  documentId  String
  approverId  String
  status      String           // PENDING, APPROVED, REJECTED
  comments    String?
  approvedAt  DateTime?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // 关联关系
  document    Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  approver    User             @relation("UserDocumentApprovals", fields: [approverId], references: [id], onDelete: Restrict)
  
  @@map("document_approvals")
}

// 联系人表
model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  position    String?
  company     String?
  relationship String?  // 与客户的关系
  
  // 关联字段
  clientId    String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("contacts")
}

// 费用表
model Fee {
  id            String       @id @default(cuid())
  description   String
  amount        Float
  method        BillingMethod
  status        FeeStatus    @default(DRAFT)
  
  // 时间信息
  dueDate       DateTime
  paidDate      DateTime?
  
  // 关联字段
  caseId        String?
  clientId      String
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // 关联关系
  case          Case?        @relation(fields: [caseId], references: [id], onDelete: Cascade)
  client        Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  payments      Payment[]
  
  @@map("fees")
}

// 支付表
model Payment {
  id          String        @id @default(cuid())
  amount      Float
  method      PaymentMethod
  transactionId String?
  notes       String?
  
  // 关联字段
  feeId       String
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // 关联关系
  fee         Fee           @relation(fields: [feeId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

// 时间记录表
model TimeEntry {
  id          String   @id @default(cuid())
  description String
  hours       Float
  rate        Float
  
  // 时间信息
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  
  // 关联字段
  caseId      String?
  userId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user        User     @relation("UserTimeEntries", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("time_entries")
}

// 笔记表
model Note {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPrivate   Boolean  @default(false)
  
  // 关联字段
  caseId      String?
  userId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联关系
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user        User     @relation("UserNotes", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notes")
=======
enum DependencyType {
  BLOCKING
  SEQUENTIAL
  PARALLEL
  SUGGESTED
}

// Financial Models
model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  caseId          String?
  clientId        String
  userId          String
  status          InvoiceStatus @default(DRAFT)
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  subtotal        Float
  taxRate         Float         @default(0.06)
  taxAmount       Float
  total           Float
  currency        String        @default("CNY")
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  case     Case?      @relation(fields: [caseId], references: [id])
  client   ClientProfile @relation(fields: [clientId], references: [id])
  user     User       @relation(fields: [userId], references: [id])
  items    InvoiceItem[]
  payments Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String           @id @default(cuid())
  invoiceId   String
  type        InvoiceItemType
  description String
  quantity    Float            @default(1)
  unitPrice   Float
  amount      Float
  taxRate     Float            @default(0.06)
  taxAmount   Float
  total       Float
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model BillingNode {
  id          String   @id @default(cuid())
  name        String
  description String?
  caseId      String
  phase       String
  order       Int
  amount      Float
  dueDate     DateTime?
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("billing_nodes")
}

model FeeStructure {
  id          String  @id @default(cuid())
  name        String
  description String?
  caseType    String
  feeType     FeeType
  rate        Float?
  percentage  Float?
  minimum     Float?
  maximum     Float?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fee_structures")
}

model TimeEntry {
  id          String   @id @default(cuid())
  caseId      String
  userId      String
  description String
  hours       Float
  rate        Float
  amount      Float
  date        DateTime
  isBilled    Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Expense {
  id          String           @id @default(cuid())
  caseId      String?
  userId      String
  category    ExpenseCategory
  description String
  amount      Float
  date        DateTime
  isBillable  Boolean          @default(true)
  isBilled    Boolean          @default(false)
  receiptUrl  String?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  case Case? @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Payment {
  id            String         @id @default(cuid())
  invoiceId     String
  amount        Float
  method        PaymentMethod
  status        PaymentStatus  @default(PENDING)
  reference     String?
  transactionId String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model TrustAccount {
  id          String   @id @default(cuid())
  clientId    String
  caseId      String?
  balance     Float    @default(0)
  currency    String   @default("CNY")
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client   ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  case     Case?        @relation(fields: [caseId], references: [id], onDelete: Cascade)
  transactions TrustTransaction[]

  @@map("trust_accounts")
}

model TrustTransaction {
  id             String               @id @default(cuid())
  trustAccountId String
  type           TrustTransactionType
  amount         Float
  description    String
  reference      String?
  status         String               @default("pending")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  // Relations
  trustAccount TrustAccount @relation(fields: [trustAccountId], references: [id], onDelete: Cascade)

  @@map("trust_transactions")
}

model WebhookLog {
  id        String   @id @default(cuid())
  gateway   String
  payload   String
  status    String   @default("PENDING")
  error     String?
  retryCount Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webhook_logs")
}

// Financial Enums
enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum InvoiceItemType {
  TIME_ENTRY
  EXPENSE
  FEE
  DISCOUNT
  TAX
  BILLING_NODE
}

enum FeeType {
  HOURLY
  FLAT
  CONTINGENCY
  RETAINER
  HYBRID
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  ACCOMMODATION
  SUPPLIES
  POSTAGE
  COURT_FEES
  EXPERT_WITNESS
  RESEARCH
  OTHER
}

enum PaymentMethod {
  ALIPAY
  WECHAT_PAY
  BANK_TRANSFER
  CASH
  CREDIT_CARD
  CHECK
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TrustTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  FEE_PAYMENT
  REFUND
}

// Document Management Models
model DocumentVersion {
  id               String   @id @default(cuid())
  documentId       String
  versionNumber    Int
  filePath         String
  fileSize         Int
  checksum         String
  changeDescription String?
  createdAt        DateTime @default(now())
  createdBy        String
  
  // Relations
  document         Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model DocumentTemplate {
  id               String   @id @default(cuid())
  name             String
  description      String?
  category         DocumentCategory?
  filePath         String
  variableSchema   Json
  isPublic         Boolean  @default(false)
  createdBy        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  usageCount       Int      @default(0)
  
  // Relations
  generatedDocuments Document[] @relation("DocumentTemplateSource")
  
  @@map("document_templates")
}

model DocumentComment {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  content    String
  position   Json?    // For positioning within document
  isResolved Boolean  @default(false)
  parentId   String?  // For threaded comments
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  parent     DocumentComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    DocumentComment[] @relation("CommentReplies")
  
  @@map("document_comments")
}

model DocumentShare {
  id         String           @id @default(cuid())
  documentId String
  sharedBy   String
  sharedWith String
  permission DocumentSharePermission
  expiresAt  DateTime?
  accessKey  String?          @unique
  message    String?
  createdAt  DateTime         @default(now())
  accessedAt DateTime?
  
  // Relations
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("document_shares")
}

model DocumentWorkflow {
  id          String   @id @default(cuid())
  documentId  String   @unique
  status      WorkflowStatus
  currentStep Int      @default(1)
  startedBy   String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  steps       DocumentWorkflowStep[]
  
  @@map("document_workflows")
}

model DocumentWorkflowStep {
  id          String              @id @default(cuid())
  workflowId  String
  stepNumber  Int
  name        String
  description String?
  assignedTo  String?
  status      WorkflowStepStatus  @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  action      String?
  notes       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  workflow    DocumentWorkflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@unique([workflowId, stepNumber])
  @@map("document_workflow_steps")
}

model EvidenceItem {
  id               String           @id @default(cuid())
  caseId           String
  title            String
  description      String?
  type             EvidenceType
  status           EvidenceStatus   @default(ACTIVE)
  location         String?
  collectedBy      String
  collectedAt      DateTime         @default(now())
  fileSize         Int?
  mimeType         String?
  filePath         String?
  checksum         String?
  tags             String[]
  metadata         Json?
  
  // Relations
  case             Case             @relation(fields: [caseId], references: [id], onDelete: Cascade)
  chainOfCustody   EvidenceChain[]
  
  @@map("evidence_items")
}

model EvidenceChain {
  id            String   @id @default(cuid())
  evidenceId    String
  action        String
  performedBy   String
  performedAt   DateTime @default(now())
  location      String?
  notes         String?
  signature     String?
  
  // Relations
  evidence      EvidenceItem @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  
  @@map("evidence_chain")
}

model SearchIndex {
  id          String   @id @default(cuid())
  entityId    String
  entityType  String
  content     String
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("search_index")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  userId      String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

// Document Management Enums
enum DocumentSharePermission {
  VIEW
  COMMENT
  EDIT
  DOWNLOAD
}

enum WorkflowStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum WorkflowStepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  REJECTED
}

enum EvidenceType {
  PHYSICAL
  DIGITAL
  DOCUMENT
  PHOTO
  VIDEO
  AUDIO
  TESTIMONY
  EXPERT_REPORT
}

enum EvidenceStatus {
  ACTIVE
  ARCHIVED
  DESTROYED
  COMPROMISED
}

// Notification Models
model Notification {
  id        String            @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean           @default(false)
  priority  NotificationPriority @default(MEDIUM)
  expiresAt DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model NotificationPreference {
  id                   String                   @id @default(cuid())
  userId               String                   @unique
  emailEnabled         Boolean                  @default(true)
  inAppEnabled         Boolean                  @default(true)
  taskAssignment      Boolean                  @default(true)
  taskDeadline        Boolean                  @default(true)
  taskCompletion      Boolean                  @default(true)
  taskEscalation      Boolean                  @default(true)
  caseUpdates         Boolean                  @default(true)
  messages            Boolean                  @default(true)
  emailFrequency      EmailFrequency           @default(IMMEDIATE)
  quietHoursStart     String?                  // Format: "HH:mm"
  quietHoursEnd       String?                  // Format: "HH:mm"
  timezone            String                   @default("Asia/Shanghai")
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt()
  
  // Relations
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

model EmailQueue {
  id           String           @id @default(cuid())
  userId       String
  to           String
  subject      String
  htmlContent  String
  textContent  String?
  status       EmailStatus      @default(PENDING)
  priority     EmailPriority    @default(MEDIUM)
  sendAt       DateTime         @default(now())
  sentAt       DateTime?
  failedAt     DateTime?
  errorMessage String?
  retryCount   Int              @default(0)
  metadata     Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt()
  
  @@map("email_queue")
}

// Notification Enums
enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_DEADLINE_REMINDER
  TASK_ESCALATION
  TASK_CANCELLED
  CASE_UPDATED
  MESSAGE_RECEIVED
  SYSTEM_ALERT
  DOCUMENT_SHARED
  DEADLINE_APPROACHING
  OVERDUE_TASK
  PRIORITY_CHANGE
  DEPENDENCY_BLOCKED
  WORKFLOW_COMPLETED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EmailFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

enum EmailStatus {
  PENDING
  SENDING
  SENT
  FAILED
  RETRYING
}

enum EmailPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
>>>>>>> epic/law-firm-pro
}