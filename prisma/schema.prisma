// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientProfile ClientProfile?
  attorneyProfile AttorneyProfile?
  assignedTasks  Task[] @relation("TaskAssignee")
  createdTasks   Task[] @relation("TaskCreator")
  invoices       Invoice[]
  timeEntries    TimeEntry[]
  expenses       Expense[]

  @@map("users")
}

model ClientProfile {
  id          String @id @default(cuid())
  userId      String @unique
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  province    String?
  country     String?
  postalCode  String?
  company     String?
  taxId       String?  // 税号 for Chinese clients
  idNumber    String?  // 身份证号 for Chinese individuals
  notes       String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases       Case[]
  invoices    Invoice[]
  payments    Payment[]
  expenses    Expense[]
  trustAccounts TrustAccount[]

  @@map("client_profiles")
}

model AttorneyProfile {
  id          String @id @default(cuid())
  userId      String @unique
  licenseNumber String
  specialization String
  experience  Int?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases  Case[]

  @@map("attorney_profiles")
}

model Case {
  id          String      @id @default(cuid())
  title       String
  description String?
  caseType    CaseType
  status      CaseStatus
  phase       CasePhase
  clientId    String
  attorneyId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  closedAt    DateTime?
  
  // Relations
  client      ClientProfile @relation(fields: [clientId], references: [id])
  attorney    AttorneyProfile @relation(fields: [attorneyId], references: [id])
  documents   Document[]
  tasks       Task[]
  billingNodes BillingNode[]
  invoices    Invoice[]
  expenses    Expense[]
  timeEntries TimeEntry[]

  @@map("cases")
}

model Document {
  id            String            @id @default(cuid())
  filename      String
  originalName  String
  path          String
  size          Int
  mimeType      String
  caseId        String?
  uploadedBy    String
  uploadedAt    DateTime          @default(now())
  isConfidential Boolean          @default(false)
  category      DocumentCategory?
  status        DocumentStatus    @default(ACTIVE)
  description   String?
  tags          String[]
  metadata      Json?
  
  // Relations
  case          Case?             @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  caseId      String
  assignedTo  String
  assignedBy  String
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?
  
  // Relations
  case        Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee    User       @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator     User       @relation("TaskCreator", fields: [assignedBy], references: [id])

  @@map("tasks")
}

// Enums
enum UserRole {
  CLIENT
  ATTORNEY
  ADMIN
  ASSISTANT
}

enum CaseType {
  LABOR_DISPUTE
  MEDICAL_MALPRACTICE
  CRIMINAL_DEFENSE
  DIVORCE_FAMILY
  INHERITANCE_DISPUTE
  CONTRACT_DISPUTE
  ADMINISTRATIVE_CASE
  DEMOLITION_CASE
  SPECIAL_MATTERS
}

enum CaseStatus {
  INTAKE
  ACTIVE
  PENDING
  COMPLETED
  CLOSED
  ARCHIVED
}

enum CasePhase {
  INTAKE_RISK_ASSESSMENT
  PRE_PROCEEDING_PREPARATION
  FORMAL_PROCEEDINGS
  RESOLUTION_POST_PROCEEDING
  CLOSURE_REVIEW_ARCHIVING
}

enum DocumentCategory {
  LEGAL_BRIEF
  CONTRACT
  EVIDENCE
  CORRESPONDENCE
  COURT_FILING
  RESEARCH
  FINANCIAL
  MEDICAL
  OTHER
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  DELETED
  UNDER_REVIEW
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}