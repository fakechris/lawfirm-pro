// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientProfile ClientProfile?
  attorneyProfile AttorneyProfile?
  assignedTasks  Task[] @relation("TaskAssignee")
  createdTasks   Task[] @relation("TaskCreator")
  auditLogs      AuditLog[]

  @@map("users")
}

model ClientProfile {
  id        String @id @default(cuid())
  userId    String @unique
  phone     String?
  address   String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases  Case[]

  @@map("client_profiles")
}

model AttorneyProfile {
  id          String @id @default(cuid())
  userId      String @unique
  licenseNumber String
  specialization String
  experience  Int?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases  Case[]

  @@map("attorney_profiles")
}

model Case {
  id          String      @id @default(cuid())
  title       String
  description String?
  caseType    CaseType
  status      CaseStatus
  phase       CasePhase
  clientId    String
  attorneyId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  closedAt    DateTime?
  
  // Relations
  client      ClientProfile @relation(fields: [clientId], references: [id])
  attorney    AttorneyProfile @relation(fields: [attorneyId], references: [id])
  documents   Document[]
  tasks       Task[]
  auditLogs   AuditLog[]

  @@map("cases")
}

model Document {
  id            String            @id @default(cuid())
  filename      String
  originalName  String
  path          String
  size          Int
  mimeType      String
  caseId        String?
  uploadedBy    String
  uploadedAt    DateTime          @default(now())
  isConfidential Boolean          @default(false)
  category      DocumentCategory?
  status        DocumentStatus    @default(ACTIVE)
  description   String?
  tags          String[]
  metadata      Json?
  
  // Relations
  case          Case?             @relation(fields: [caseId], references: [id], onDelete: Cascade)
  auditLogs     AuditLog[]

  @@map("documents")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  caseId      String
  assignedTo  String
  assignedBy  String
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?
  
  // Relations
  case        Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee    User       @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator     User       @relation("TaskCreator", fields: [assignedBy], references: [id])
  auditLogs   AuditLog[]

  @@map("tasks")
}

model AuditLog {
  id          String      @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  userId      String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  case        Case?       @relation(fields: [entityId], references: [id], onDelete: Cascade)
  document    Document?   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  task        Task?       @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Enums
enum UserRole {
  CLIENT
  ATTORNEY
  ADMIN
  ASSISTANT
}

enum CaseType {
  LABOR_DISPUTE
  MEDICAL_MALPRACTICE
  CRIMINAL_DEFENSE
  DIVORCE_FAMILY
  INHERITANCE_DISPUTE
  CONTRACT_DISPUTE
  ADMINISTRATIVE_CASE
  DEMOLITION_CASE
  SPECIAL_MATTERS
}

enum CaseStatus {
  INTAKE
  ACTIVE
  PENDING
  COMPLETED
  CLOSED
  ARCHIVED
}

enum CasePhase {
  INTAKE_RISK_ASSESSMENT
  PRE_PROCEEDING_PREPARATION
  FORMAL_PROCEEDINGS
  RESOLUTION_POST_PROCEEDING
  CLOSURE_REVIEW_ARCHIVING
}

enum DocumentCategory {
  LEGAL_BRIEF
  CONTRACT
  EVIDENCE
  CORRESPONDENCE
  COURT_FILING
  RESEARCH
  FINANCIAL
  MEDICAL
  OTHER
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  DELETED
  UNDER_REVIEW
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Financial Management Models

model BillingNode {
  id          String   @id @default(cuid())
  name        String
  description String?
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  phase       String   // Which phase this node belongs to
  order       Int      // Order within phase
  amount      Float
  isPaid      Boolean  @default(false)
  dueDate     DateTime?
  paidDate    DateTime?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("billing_nodes")
}

model FeeStructure {
  id          String   @id @default(cuid())
  name        String
  type        String   // "hourly", "flat", "contingency", "retainer"
  description String?
  rate        Float?   // For hourly fees
  percentage  Float?   // For contingency fees
  minimum     Float?   // Minimum fee amount
  maximum     Float?   // Maximum fee amount
  currency    String   @default("CNY")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fee_structures")
}

model TimeEntry {
  id          String   @id @default(cuid())
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  hours       Float
  rate        Float
  amount      Float
  date        DateTime
  isBillable  Boolean  @default(true)
  isBilled    Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("time_entries")
}

model Expense {
  id          String   @id @default(cuid())
  caseId      String?
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: SetNull)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    String   // "filing", "travel", "research", "expert", "copy", "postage", "other"
  description String
  amount      Float
  currency    String   @default("CNY")
  date        DateTime
  isBillable  Boolean  @default(true)
  isBilled    Boolean  @default(false)
  isReimbursed Boolean @default(false)
  receiptUrl  String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  amount      Float
  currency    String   @default("CNY")
  method      String   // "cash", "bank_transfer", "alipay", "wechat_pay", "credit_card"
  reference   String?  // Payment reference number
  status      String   @default("pending") // pending, completed, failed, refunded
  transactionId String? // External payment processor ID
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("payments")
}

model TrustAccount {
  id          String   @id @default(cuid())
  clientId    String
  client      ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  caseId      String?
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: SetNull)
  balance     Float    @default(0)
  currency    String   @default("CNY")
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trust_accounts")
}

model TrustTransaction {
  id          String   @id @default(cuid())
  trustAccountId String
  trustAccount TrustAccount @relation(fields: [trustAccountId], references: [id], onDelete: Cascade)
  type        String   // "deposit", "withdrawal", "transfer"
  amount      Float
  description String
  reference   String?
  status      String   @default("pending") // pending, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trust_transactions")
}

// Financial Enums
enum FeeType {
  HOURLY
  FLAT
  CONTINGENCY
  RETAINER
  HYBRID
}

enum ExpenseCategory {
  FILING_FEES
  COURT_COSTS
  TRAVEL
  RESEARCH
  EXPERT_WITNESS
  COPYING
  POSTAGE
  MEALS
  ACCOMMODATION
  TRANSLATION
  OTHER
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  ALIPAY
  WECHAT_PAY
  CREDIT_CARD
  CHECK
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum TrustTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  INTEREST
}