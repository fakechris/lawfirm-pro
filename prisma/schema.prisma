// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management Enums
enum UserRole {
  ADMIN
  LAWYER
  PARALEGAL
  ASSISTANT
  ARCHIVIST
  CLIENT
  ATTORNEY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Case Management Enums
enum CaseType {
  LABOR_DISPUTE           // 劳动争议
  MEDICAL_MALPRACTICE     // 医疗纠纷
  CRIMINAL_DEFENSE        // 刑事辩护
  DIVORCE_FAMILY          // 离婚家事
  INHERITANCE_DISPUTE     // 继承纠纷
  CONTRACT_DISPUTE        // 合同纠纷
  ADMINISTRATIVE_CASE     // 行政诉讼
  DEMOLITION_CASE         // 拆迁类案件
  SPECIAL_MATTER          // 特殊事项管理
}

enum CasePhase {
  INTAKE_RISK_ASSESSMENT   // 接案、风险评估与策略制定
  PRE_PROCEEDING_PREP      // 诉前准备与立案
  FORMAL_PROCEEDINGS       // 正式程序（庭审/听证/仲裁）
  RESOLUTION_POST          // 解决方案与后续行动
  CLOSURE_REVIEW           // 结案、审查与归档
}

enum CaseStatus {
  DRAFT
  INTAKE
  ACTIVE
  PENDING
  ON_HOLD
  COMPLETED
  CANCELLED
  CLOSED
  ARCHIVED
}

// Task Management Enums
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Document Management Enums
enum DocumentProcessingStatus {
  PENDING
  PROCESSING
  PROCESSED
  FAILED
}

enum DocumentCategory {
  LEGAL_BRIEF
  CONTRACT
  EVIDENCE
  CORRESPONDENCE
  COURT_FILING
  RESEARCH
  FINANCIAL
  MEDICAL
  INVOICE
  REPORT
  TEMPLATE
  MOTION
  ORDER
  TRANSCRIPT
  PHOTOGRAPH
  VIDEO
  AUDIO
  OTHER
}

enum DocumentStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DELETED
  UNDER_REVIEW
  APPROVED
  REJECTED
  PROCESSING
}

enum DocumentType {
  LEGAL_DOCUMENT
  EVIDENCE
  CONTRACT
  CORRESPONDENCE
  COURT_FILING
  RESEARCH
  TEMPLATE
  OTHER
}

// Knowledge Base Enums
enum KnowledgeBaseContentType {
  BEST_PRACTICE
  CASE_STUDY
  LEGAL_GUIDE
  TEMPLATE
  TRAINING_MATERIAL
  POLICY
  PROCEDURE
  RESEARCH_NOTE
  LEGAL_OPINION
  CHECKLIST
  WORKFLOW
  RESOURCE
}

enum KnowledgeBaseAccessLevel {
  PUBLIC
  INTERNAL
  RESTRICTED
  CONFIDENTIAL
}

enum KnowledgeBaseStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
  DEPRECATED
}

// Evidence Management Enums
enum EvidenceType {
  PHYSICAL
  DIGITAL
  DOCUMENT
  PHOTO
  VIDEO
  AUDIO
  TESTIMONY
  EXPERT_REPORT
}

enum EvidenceStatus {
  ACTIVE
  ARCHIVED
  DESTROYED
  COMPROMISED
  PROCESSING
  ANALYZED
  REVIEWED
  ADMITTED
  EXCLUDED
}

enum EvidenceRelationshipType {
  RELATED_TO
  DERIVED_FROM
  SUPPORTS
  CONTRADICTS
  DUPLICATE_OF
  CORROBORATES
}

// Workflow Enums
enum WorkflowStatus {
  DRAFT
  IN_PROGRESS
  REVIEW
  APPROVED
  REJECTED
  COMPLETED
}

enum WorkflowStepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  REJECTED
}

// Core Models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  role        UserRole @default(LAWYER)
  status      UserStatus @default(ACTIVE)
  
  // Assistant specialization
  assistantType String? // RESEARCH_ASSISTANT, DOCUMENT_ASSISTANT, COORDINATION_ASSISTANT
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  clientProfile ClientProfile?
  attorneyProfile AttorneyProfile?
  leadCases   Case[]                @relation("LeadLawyer")
  assignedTasks Task[]              @relation("TaskAssignee")
  createdTasks Task[]               @relation("TaskCreator")
  uploadedDocuments Document[]      @relation("UserDocuments")
  timeEntries TimeEntry[]           @relation("UserTimeEntries")
  notes       Note[]                @relation("UserNotes")
  caseMemberships CaseTeamMember[]  @relation("UserCaseMemberships")
  documentApprovals DocumentApproval[] @relation("UserDocumentApprovals")
  createdDocumentVersions DocumentVersion[] @relation("DocumentVersionCreator")
  createdDocumentTemplates DocumentTemplate[] @relation("DocumentTemplateCreator")
  createdTemplateVersions TemplateVersion[] @relation("TemplateVersionCreator")
  documentComments DocumentComment[] @relation("DocumentCommentAuthor")
  sharedDocuments DocumentShare[] @relation("DocumentSharedBy")
  receivedDocuments DocumentShare[] @relation("DocumentSharedWith")
  startedWorkflows DocumentWorkflow[] @relation("DocumentWorkflowStarter")
  assignedWorkflowSteps DocumentWorkflowStep[] @relation("DocumentWorkflowStepAssignee")
  collectedEvidence EvidenceItem[] @relation("EvidenceCollector")
  evidenceChainEntries EvidenceChain[] @relation("EvidenceChainPerformer")
  invoices    Invoice[]
  expenses    Expense[]
  notifications Notification[]
  notificationPreference NotificationPreference?
  
  // Knowledge Base relations
  authoredArticles KnowledgeBaseArticle[] @relation("KnowledgeBaseAuthor")
  reviewedArticles KnowledgeBaseArticle[] @relation("KnowledgeBaseReviewer")
  knowledgeBaseComments KnowledgeBaseComment[]

  @@map("users")
}

model ClientProfile {
  id        String @id @default(cuid())
  userId    String @unique
  phone     String?
  address   String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases  Case[]
  invoices Invoice[]
  trustAccounts TrustAccount[]

  @@map("client_profiles")
}

model AttorneyProfile {
  id          String @id @default(cuid())
  userId      String @unique
  licenseNumber String
  specialization String
  experience  Int?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases  Case[]

  @@map("attorney_profiles")
}

model Client {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  address     String?
  company     String?
  idNumber    String?  // 身份证号或统一社会信用代码
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cases       Case[]
  documents   Document[]
  contacts    Contact[]
  fees        Fee[]
  
  @@map("clients")
}

model Case {
  id          String     @id @default(cuid())
  caseNumber  String     @unique
  title       String
  description String?
  caseType    CaseType
  phase       CasePhase  @default(INTAKE_RISK_ASSESSMENT)
  status      CaseStatus @default(DRAFT)
  
  // Time information
  startDate   DateTime
  expectedEndDate DateTime?
  actualEndDate DateTime?
  
  // Financial information
  claimAmount Float?     // 诉讼标的额
  settlementAmount Float? // 和解金额
  
  // Relations
  clientId    String
  leadLawyerId String
  assignedAt  DateTime  @default(now())
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  leadLawyer  User      @relation("LeadLawyer", fields: [leadLawyerId], references: [id], onDelete: Restrict)
  teamMembers CaseTeamMember[]
  tasks       Task[]
  documents   Document[]
  fees        Fee[]
  timeEntries TimeEntry[]
  notes       Note[]
  phases      CasePhaseHistory[]
  evidenceItems EvidenceItem[]
  billingNodes BillingNode[]
  clientProfiles ClientProfile[]
  attorneyProfiles AttorneyProfile[]
  invoices Invoice[]
  expenses Expense[]
  trustAccounts TrustAccount[]
  
  @@map("cases")
}

model CaseTeamMember {
  id       String   @id @default(cuid())
  caseId   String
  userId   String
  role     String   // LEAD_LAWYER, PARTICIPATING_LAWYER, RESEARCH_ASSISTANT, DOCUMENT_ASSISTANT, COORDINATION_ASSISTANT, ARCHIVIST
  joinedAt DateTime @default(now())
  leftAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  case     Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user     User     @relation("UserCaseMemberships", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([caseId, userId])
  @@map("case_team_members")
}

model CasePhaseHistory {
  id        String   @id @default(cuid())
  caseId    String
  phase     CasePhase
  startDate DateTime
  endDate   DateTime?
  notes     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  @@map("case_phase_history")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  
  // Time information
  dueDate     DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  
  // Relations
  caseId      String?
  assigneeId  String?
  createdById String
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  case        Case?       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy   User        @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Restrict)
  subtasks    SubTask[]
  dependencies TaskDependency[] @relation("TaskDependencies")
  dependents   TaskDependency[] @relation("TaskDependents")
  
  @@map("tasks")
}

model SubTask {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  
  // Time information
  dueDate     DateTime?
  completedAt DateTime?
  
  // Relations
  taskId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("subtasks")
}

model TaskDependency {
  id           String   @id @default(cuid())
  taskId       String
  dependsOnId  String
  dependencyType String  // BLOCKS, RELATED_TO
  
  createdAt    DateTime @default(now())
  
  // Relations
  task         Task     @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn    Task     @relation("TaskDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, dependsOnId])
  @@map("task_dependencies")
}

// Document Management Models
model Document {
  id            String            @id @default(cuid())
  filename      String
  originalName  String
  path          String
  size          Int
  mimeType      String
  type          DocumentType
  status        DocumentStatus    @default(DRAFT)
  category      DocumentCategory?
  
  // Version control
  version       Int               @default(1)
  parentId      String?           // Parent document ID for version control
  isLatest      Boolean           @default(true)
  
  // Relations
  caseId        String?
  clientId      String?
  uploadedById  String
  
  // Document content
  content       String?
  extractedText String?           // OCR extracted text
  processingStatus String?        // PENDING, PROCESSING, PROCESSED, FAILED
  isConfidential Boolean          @default(false)
  isTemplate    Boolean          @default(false)
  description   String?
  tags          String[]
  metadata      Json?
  checksum      String?
  thumbnailPath String?
  deletedAt     DateTime?
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relations
  case          Case?             @relation(fields: [caseId], references: [id], onDelete: Cascade)
  client        Client?           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  uploadedBy    User              @relation("UserDocuments", fields: [uploadedById], references: [id], onDelete: Restrict)
  parent        Document?         @relation("DocumentParent", fields: [parentId], references: [id], onDelete: SetNull)
  children      Document[]        @relation("DocumentParent")
  versions      DocumentVersion[]
  approvals     DocumentApproval[]
  template      DocumentTemplate? @relation("DocumentTemplateSource", fields: [templateId], references: [id])
  templateId    String?
  workflow      DocumentWorkflow?
  comments      DocumentComment[]
  shares        DocumentShare[]
  
  @@map("documents")
}

model DocumentVersion {
  id               String   @id @default(cuid())
  documentId       String
  versionNumber    Int
  filePath         String
  fileSize         Int
  checksum         String
  changeDescription String?
  createdBy        String
  createdAt        DateTime @default(now())
  isLatest         Boolean  @default(true)
  isDeleted        Boolean  @default(false)
  
  // Relations
  document         Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdByUser    User     @relation("DocumentVersionCreator", fields: [createdBy], references: [id], onDelete: Restrict)

  @@unique([documentId, versionNumber])
  @@map("document_versions")
}

model DocumentApproval {
  id          String           @id @default(cuid())
  documentId  String
  approverId  String
  status      String           // PENDING, APPROVED, REJECTED
  comments    String?
  approvedAt  DateTime?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  document    Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  approver    User             @relation("UserDocumentApprovals", fields: [approverId], references: [id], onDelete: Restrict)
  
  @@map("document_approvals")
}

model DocumentTemplate {
  id               String   @id @default(cuid())
  name             String
  description      String?
  category         DocumentCategory?
  filePath         String
  fileSize         Int?
  mimeType         String?
  checksum         String?
  variableSchema   Json
  tags             String[]
  isPublic         Boolean  @default(false)
  isActive         Boolean  @default(true)
  createdBy        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  usageCount       Int      @default(0)
  metadata         Json?
  
  // Relations
  generatedDocuments Document[] @relation("DocumentTemplateSource")
  createdByUser     User      @relation("DocumentTemplateCreator", fields: [createdBy], references: [id], onDelete: Restrict)
  variables         TemplateVariable[]
  versions          TemplateVersion[]
  
  @@map("document_templates")
}

model DocumentComment {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  content    String
  position   Json?    // For positioning within document
  isResolved Boolean  @default(false)
  parentId   String?  // For threaded comments
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  author     User     @relation("DocumentCommentAuthor", fields: [userId], references: [id], onDelete: Restrict)
  parent     DocumentComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    DocumentComment[] @relation("CommentReplies")
  
  @@map("document_comments")
}

model DocumentShare {
  id         String           @id @default(cuid())
  documentId String
  sharedBy   String
  sharedWith String
  permission DocumentSharePermission
  expiresAt  DateTime?
  accessKey  String?          @unique
  message    String?
  createdAt  DateTime         @default(now())
  accessedAt DateTime?
  
  // Relations
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sharedByUser   User     @relation("DocumentSharedBy", fields: [sharedBy], references: [id], onDelete: Restrict)
  sharedWithUser User     @relation("DocumentSharedWith", fields: [sharedWith], references: [id], onDelete: Restrict)
  
  @@map("document_shares")
}

model DocumentWorkflow {
  id          String   @id @default(cuid())
  documentId  String   @unique
  status      WorkflowStatus
  currentStep Int      @default(1)
  startedBy   String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  startedByUser User     @relation("DocumentWorkflowStarter", fields: [startedBy], references: [id], onDelete: Restrict)
  steps       DocumentWorkflowStep[]
  
  @@map("document_workflows")
}

model DocumentWorkflowStep {
  id          String              @id @default(cuid())
  workflowId  String
  stepNumber  Int
  name        String
  description String?
  assignedTo  String?
  status      WorkflowStepStatus  @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  action      String?
  notes       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  workflow    DocumentWorkflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  assignedToUser User?            @relation("DocumentWorkflowStepAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  
  @@unique([workflowId, stepNumber])
  @@map("document_workflow_steps")
}

// Evidence Management Models
model EvidenceItem {
  id               String           @id @default(cuid())
  caseId           String
  title            String
  description      String?
  type             EvidenceType
  status           EvidenceStatus   @default(ACTIVE)
  location         String?
  collectedBy      String
  collectedAt      DateTime         @default(now())
  fileSize         Int?
  mimeType         String?
  filePath         String?
  checksum         String?
  tags             String[]
  metadata         Json?
  
  // Relations
  case             Case             @relation(fields: [caseId], references: [id], onDelete: Cascade)
  chainOfCustody   EvidenceChain[]
  relationships    EvidenceRelationship[] @relation("EvidenceRelationshipSource")
  relatedTo        EvidenceRelationship[] @relation("EvidenceRelationshipTarget")
  collectedByUser  User             @relation("EvidenceCollector", fields: [collectedBy], references: [id], onDelete: Restrict)
  
  @@map("evidence_items")
}

model EvidenceChain {
  id            String   @id @default(cuid())
  evidenceId    String
  action        String
  performedBy   String
  performedAt   DateTime @default(now())
  location      String?
  notes         String?
  signature     String?
  
  // Relations
  evidence      EvidenceItem @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  performedByUser User       @relation("EvidenceChainPerformer", fields: [performedBy], references: [id], onDelete: Restrict)
  
  @@map("evidence_chain")
}

model EvidenceRelationship {
  id                 String                   @id @default(cuid())
  evidenceId         String
  relatedEvidenceId  String
  relationshipType   EvidenceRelationshipType
  description        String?
  createdAt          DateTime                 @default(now())
  
  // Relations
  evidence           EvidenceItem             @relation("EvidenceRelationshipSource", fields: [evidenceId], references: [id], onDelete: Cascade)
  relatedEvidence    EvidenceItem             @relation("EvidenceRelationshipTarget", fields: [relatedEvidenceId], references: [id], onDelete: Cascade)
  
  @@unique([evidenceId, relatedEvidenceId])
  @@map("evidence_relationships")
}

model TemplateVariable {
  id               String   @id @default(cuid())
  templateId       String
  name             String
  type             String   // TEXT, NUMBER, DATE, BOOLEAN, SELECT, MULTI_SELECT
  description      String?
  defaultValue      String?
  required         Boolean  @default(false)
  validationRules  Json?
  options          String[] // For SELECT and MULTI_SELECT types
  order            Int      @default(0)
  
  // Relations
  template         DocumentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, name])
  @@map("template_variables")
}

model TemplateVersion {
  id               String   @id @default(cuid())
  templateId       String
  versionNumber    Int
  filePath         String
  fileSize         Int
  checksum         String
  changeDescription String?
  createdBy        String
  createdAt        DateTime @default(now())
  isActive         Boolean  @default(true)
  
  // Relations
  template         DocumentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdByUser    User             @relation("TemplateVersionCreator", fields: [createdBy], references: [id], onDelete: Restrict)
  
  @@unique([templateId, versionNumber])
  @@map("template_versions")
}

// Financial Management Models
model Fee {
  id            String       @id @default(cuid())
  description   String
  amount        Float
  method        BillingMethod
  status        FeeStatus    @default(DRAFT)
  
  // Time information
  dueDate       DateTime
  paidDate      DateTime?
  
  // Relations
  caseId        String?
  clientId      String
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  case          Case?        @relation(fields: [caseId], references: [id], onDelete: Cascade)
  client        Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  payments      Payment[]
  
  @@map("fees")
}

model Payment {
  id          String        @id @default(cuid())
  amount      Float
  method      PaymentMethod
  transactionId String?
  notes       String?
  
  // Relations
  feeId       String?
  invoiceId   String?
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  
  // Relations
  fee         Fee?          @relation(fields: [feeId], references: [id], onDelete: SetNull)
  invoice     Invoice?      @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  
  @@map("payments")
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String
  hours       Float
  rate        Float
  
  // Time information
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  
  // Relations
  caseId      String?
  userId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user        User     @relation("UserTimeEntries", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("time_entries")
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPrivate   Boolean  @default(false)
  
  // Relations
  caseId      String?
  userId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user        User     @relation("UserNotes", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notes")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  position    String?
  company     String?
  relationship String?  // 与客户的关系
  
  // Relations
  clientId    String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("contacts")
}

// Financial Enums
enum BillingMethod {
  FIXED_FEE
  HOURLY
  CONTINGENCY
  PERCENTAGE
}

enum FeeStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  WECHAT_PAY
  ALIPAY
  CREDIT_CARD
}

// Document Share Permission Enum
enum DocumentSharePermission {
  VIEW
  COMMENT
  EDIT
  DOWNLOAD
}

// Additional Models for Advanced Features
model SearchIndex {
  id              String   @id @default(cuid())
  entityId        String
  entityType      String
  title           String
  content         String
  processedContent String?
  tags            String[]
  vector          Float[]
  metadata        Json?
  language        String   @default("zh-CN")
  relevanceScore  Float?   @default(0)
  viewCount       Int      @default(0)
  lastAccessedAt  DateTime?
  isPublished     Boolean  @default(true)
  accessLevel     String   @default("public")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("search_index")
  @@index([entityType])
  @@index([language])
  @@index([isPublished])
  @@index([accessLevel])
  @@index([createdAt])
}

// Knowledge Base Models
model KnowledgeBaseArticle {
  id              String                    @id @default(cuid())
  title           String
  slug            String                    @unique
  content         String
  summary         String?
  contentType     KnowledgeBaseContentType
  status          KnowledgeBaseStatus       @default(DRAFT)
  accessLevel     KnowledgeBaseAccessLevel  @default(INTERNAL)
  language        String                    @default("zh-CN")
  tags            String[]
  categories      String[]
  authorId        String
  reviewerId      String?
  publishedAt     DateTime?
  viewCount       Int                       @default(0)
  likeCount       Int                       @default(0)
  shareCount      Int                       @default(0)
  isFeatured      Boolean                   @default(false)
  metadata        Json?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  
  author          User                      @relation("KnowledgeBaseAuthor", fields: [authorId], references: [id])
  reviewer        User?                     @relation("KnowledgeBaseReviewer", fields: [reviewerId], references: [id])
  searchIndex     SearchIndex?              @relation("KnowledgeBaseSearchIndex", fields: [id], references: [entityId])
  views           KnowledgeBaseView[]
  interactions    KnowledgeBaseInteraction[]
  
  @@map("knowledge_base_articles")
  @@index([contentType])
  @@index([status])
  @@index([accessLevel])
  @@index([authorId])
  @@index([publishedAt])
  @@index([language])
}

model KnowledgeBaseCategory {
  id          String                    @id @default(cuid())
  name        String                    @unique
  description String?
  slug        String                    @unique
  parentId    String?
  sortOrder   Int                       @default(0)
  isActive    Boolean                   @default(true)
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  
  parent      KnowledgeBaseCategory?    @relation("KnowledgeBaseCategoryHierarchy", fields: [parentId], references: [id])
  children    KnowledgeBaseCategory[]   @relation("KnowledgeBaseCategoryHierarchy")
  articles    KnowledgeBaseArticle[]
  
  @@map("knowledge_base_categories")
  @@index([isActive])
  @@index([sortOrder])
}

model KnowledgeBaseComment {
  id          String   @id @default(cuid())
  articleId   String
  authorId    String
  content     String
  isResolved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  article     KnowledgeBaseArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author      User                 @relation(fields: [authorId], references: [id])
  
  @@map("knowledge_base_comments")
  @@index([articleId])
  @@index([authorId])
  @@index([isResolved])
}

model SearchAnalytics {
  id               String   @id @default(cuid())
  query            String
  resultsCount     Int
  clickThroughRate Float?
  userId           String?
  sessionId        String?
  filters          Json?
  sortBy           String?
  processingTime   Int
  createdAt        DateTime @default(now())
  
  @@map("search_analytics")
  @@index([query])
  @@index([userId])
  @@index([createdAt])
}

// Knowledge Base Analytics Models
model KnowledgeBaseView {
  id                   String   @id @default(cuid())
  articleId            String
  userId               String?
  sessionId            String?
  readTime             Int?     // Time spent reading in seconds
  completionPercentage Float?   // Percentage of article read
  referrer             String?
  utmSource            String?
  utmMedium            String?
  utmCampaign          String?
  createdAt            DateTime @default(now())
  
  // Relations
  article KnowledgeBaseArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@map("knowledge_base_views")
  @@index([articleId])
  @@index([userId])
  @@index([createdAt])
}

model KnowledgeBaseInteraction {
  id              String                        @id @default(cuid())
  articleId       String
  userId          String
  interactionType KnowledgeBaseInteractionType
  targetId        String?                       // For comments or helpful votes
  content         String?                       // For comments
  metadata        Json?                         // Additional interaction data
  createdAt       DateTime                      @default(now())
  
  // Relations
  article KnowledgeBaseArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@map("knowledge_base_interactions")
  @@index([articleId])
  @@index([userId])
  @@index([interactionType])
  @@index([createdAt])
}

model KnowledgeBaseSearchActivity {
  id             String   @id @default(cuid())
  query          String
  userId         String?
  sessionId      String?
  resultsCount   Int
  clickedResults String[] // Array of article IDs that were clicked
  filters        Json?
  responseTime   Int      // Response time in milliseconds
  success        Boolean  @default(true)
  createdAt      DateTime @default(now())
  
  @@map("knowledge_base_search_activity")
  @@index([query])
  @@index([userId])
  @@index([createdAt])
}

// Knowledge Base Analytics Enums
enum KnowledgeBaseInteractionType {
  LIKE
  COMMENT
  SHARE
  BOOKMARK
  HELPFUL_VOTE
  DOWNLOAD
  PRINT
}

// Knowledge Base Integration Models
model KnowledgeBaseIntegration {
  id           String   @id @default(cuid())
  name         String
  type         String   // webhook, api, database, message_queue
  endpoint     String
  headers      Json?
  auth         Json?    // Authentication configuration
  events       String[] // Event types this integration handles
  active       Boolean  @default(true)
  retryPolicy  Json     // Retry configuration
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("knowledge_base_integrations")
}

model KnowledgeBaseIntegrationEvent {
  id         String   @id @default(cuid())
  type       String
  source     String
  payload    Json
  timestamp  DateTime @default(now())
  processed  Boolean  @default(false)
  processedAt DateTime?
  error      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("knowledge_base_integration_events")
  @@index([type])
  @@index([source])
  @@index([processed])
  @@index([timestamp])
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  userId      String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

// Notification Models
model Notification {
  id        String            @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean           @default(false)
  priority  NotificationPriority @default(MEDIUM)
  expiresAt DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model NotificationPreference {
  id                   String                   @id @default(cuid())
  userId               String                   @unique
  emailEnabled         Boolean                  @default(true)
  inAppEnabled         Boolean                  @default(true)
  taskAssignment      Boolean                  @default(true)
  taskDeadline        Boolean                  @default(true)
  taskCompletion      Boolean                  @default(true)
  taskEscalation      Boolean                  @default(true)
  caseUpdates         Boolean                  @default(true)
  messages            Boolean                  @default(true)
  emailFrequency      EmailFrequency           @default(IMMEDIATE)
  quietHoursStart     String?                  // Format: "HH:mm"
  quietHoursEnd       String?                  // Format: "HH:mm"
  timezone            String                   @default("Asia/Shanghai")
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt()
  
  // Relations
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

model EmailQueue {
  id           String           @id @default(cuid())
  userId       String
  to           String
  subject      String
  htmlContent  String
  textContent  String?
  status       EmailStatus      @default(PENDING)
  priority     EmailPriority    @default(MEDIUM)
  sendAt       DateTime         @default(now())
  sentAt       DateTime?
  failedAt     DateTime?
  errorMessage String?
  retryCount   Int              @default(0)
  metadata     Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt()
  
  @@map("email_queue")
}

// Notification Enums
enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_DEADLINE_REMINDER
  TASK_ESCALATION
  TASK_CANCELLED
  CASE_UPDATED
  MESSAGE_RECEIVED
  SYSTEM_ALERT
  DOCUMENT_SHARED
  DEADLINE_APPROACHING
  OVERDUE_TASK
  PRIORITY_CHANGE
  DEPENDENCY_BLOCKED
  WORKFLOW_COMPLETED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EmailFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

enum EmailStatus {
  PENDING
  SENDING
  SENT
  FAILED
  RETRYING
}

enum EmailPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Additional Financial Models
model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  caseId          String?
  clientId        String
  userId          String
  status          InvoiceStatus @default(DRAFT)
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  subtotal        Float
  taxRate         Float         @default(0.06)
  taxAmount       Float
  total           Float
  currency        String        @default("CNY")
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  case     Case?      @relation(fields: [caseId], references: [id])
  client   ClientProfile @relation(fields: [clientId], references: [id])
  user     User       @relation(fields: [userId], references: [id])
  items    InvoiceItem[]
  payments Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String           @id @default(cuid())
  invoiceId   String
  type        InvoiceItemType
  description String
  quantity    Float            @default(1)
  unitPrice   Float
  amount      Float
  taxRate     Float            @default(0.06)
  taxAmount   Float
  total       Float
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model BillingNode {
  id          String   @id @default(cuid())
  name        String
  description String?
  caseId      String
  phase       String
  order       Int
  amount      Float
  dueDate     DateTime?
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("billing_nodes")
}

model FeeStructure {
  id          String  @id @default(cuid())
  name        String
  description String?
  caseType    String
  feeType     FeeType
  rate        Float?
  percentage  Float?
  minimum     Float?
  maximum     Float?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fee_structures")
}

model Expense {
  id          String           @id @default(cuid())
  caseId      String?
  userId      String
  category    ExpenseCategory
  description String
  amount      Float
  date        DateTime
  isBillable  Boolean          @default(true)
  isBilled    Boolean          @default(false)
  receiptUrl  String?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  case Case? @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model TrustAccount {
  id          String   @id @default(cuid())
  clientId    String
  caseId      String?
  balance     Float    @default(0)
  currency    String   @default("CNY")
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client   ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  case     Case?        @relation(fields: [caseId], references: [id], onDelete: Cascade)
  transactions TrustTransaction[]

  @@map("trust_accounts")
}

model TrustTransaction {
  id             String               @id @default(cuid())
  trustAccountId String
  type           TrustTransactionType
  amount         Float
  description    String
  reference      String?
  status         String               @default("pending")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  // Relations
  trustAccount TrustAccount @relation(fields: [trustAccountId], references: [id], onDelete: Cascade)

  @@map("trust_transactions")
}

model WebhookLog {
  id        String   @id @default(cuid())
  gateway   String
  payload   String
  status    String   @default("PENDING")
  error     String?
  retryCount Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webhook_logs")
}

// Financial Enums
enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum InvoiceItemType {
  TIME_ENTRY
  EXPENSE
  FEE
  DISCOUNT
  TAX
  BILLING_NODE
}

enum FeeType {
  HOURLY
  FLAT
  CONTINGENCY
  RETAINER
  HYBRID
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  ACCOMMODATION
  SUPPLIES
  POSTAGE
  COURT_FEES
  EXPERT_WITNESS
  RESEARCH
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TrustTransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  FEE_PAYMENT
  REFUND
}

// Integration Management Enums
enum IntegrationService {
  PACER
  STATE_COURTS
  STRIPE
  PAYPAL
  LEXIS_NEXIS
  WESTLAW
  GOOGLE_DRIVE
  DROPBOX
  TWILIO
  SENDGRID
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  MAINTENANCE
}

enum CircuitBreakerState {
  CLOSED
  OPEN
  HALF_OPEN
}

enum WebhookEventType {
  PAYMENT_SUCCESS
  PAYMENT_FAILURE
  COURT_FILING_UPDATE
  DOCUMENT_PROCESSED
  COMMUNICATION_SENT
  SERVICE_STATUS_CHANGE
}

// Integration Management Models
model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  userId      String
  service     IntegrationService
  permissions String[] // JSON array of permissions
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model IntegrationConfig {
  id        String           @id @default(cuid())
  service   IntegrationService @unique
  config    Json             // Service-specific configuration
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("integration_configs")
}

model IntegrationLog {
  id          String   @id @default(cuid())
  service     IntegrationService
  operation   String
  requestId   String
  userId      String?
  status      Int      // HTTP status code
  duration    Int      // Response time in milliseconds
  error       String?
  metadata    Json?    // Additional metadata
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("integration_logs")
}

model CircuitBreakerLog {
  id        String             @id @default(cuid())
  service   IntegrationService
  oldState  CircuitBreakerState
  newState  CircuitBreakerState
  reason    String?
  createdAt DateTime           @default(now())

  @@map("circuit_breaker_logs")
}

model RateLimitLog {
  id          String   @id @default(cuid())
  service     IntegrationService
  identifier  String   // User ID or IP address
  action      String   // 'allowed', 'blocked', 'reset'
  count       Int
  windowStart DateTime
  windowEnd   DateTime
  createdAt   DateTime @default(now())

  @@map("rate_limit_logs")
}

model WebhookLog {
  id        String           @id @default(cuid())
  service   IntegrationService
  eventType WebhookEventType
  payload   Json             // Webhook payload
  signature String?
  processed Boolean          @default(false)
  error     String?
  createdAt DateTime         @default(now())

  @@map("webhook_logs")
}

model UserPermission {
  id        String   @id @default(cuid())
  userId    String
  service   IntegrationService
  action    String   // 'read', 'write', 'admin'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, service, action])
  @@map("user_permissions")
}